#!/bin/bash
# User specific aliases and functions

# Script include

function echo-err { echo "$@" 1>&2; }

function date-today { echo $(date +%F); }
function date-second { echo $(date +%F_%H-%M-%S); }
function date-8601 { date -u +%Y-%m-%dT%H:%M:%S%z; }
function date-8601-local { date +%Y-%m-%dT%H:%M:%S%z; }
function log-8601 { echo "[ $(date-8601) ] $@"; }
function log-err-8601 { echo-err "[ $(date-8601) ] $@"; }

function ask { echo -ne "${CYELLOW} $1: ${CDEFAULT}"; read ASK; export ASK; }
function ask-default { echo -ne "${CYELLOW} $1 [$2]: ${CDEFAULT}"; read ASK; export ASK=${ASK:-$2}; }
function ask-yes { echo -ne "${CYELLOW} $1 [Y/n]: ${CDEFAULT}"; read ASK; ASK="$(echo $ASK | tr '[:upper:]' '[:lower:]')"; export ASK=${ASK:-y}; }
function ask-no { echo -ne "${CYELLOW} $1 [y/N]: ${CDEFAULT}"; read ASK; ASK="$(echo $ASK | tr '[:upper:]' '[:lower:]')"; export ASK=${ASK:-n}; }
function ask-enter { echo -e "${CYELLOW} $1: [Press enter to continue]${CDEFAULT}" ; read; }

function msg-error { echo -e "${CRED}${@}${CDEFAULT}"; }
function msg-info { echo -e "${CCYAN}${@}${CDEFAULT}"; }
function msg-success { echo -e "${CGREEN}${@}${CDEFAULT}"; }
function msg-dry { echo -e "${CPINK}${@}${CDEFAULT}"; }

function each-line { for var in "$@"; do echo "$var"; done; }

# OSX does not have realpath
if ! which realpath &> /dev/null; then
  function realpath {
    python -c "import os; print(os.path.realpath('$1'))"
  }
fi

alias mark='MARK="$(realpath .)"'
alias back='cd "$MARK"'
alias flick='FLICK="$(realpath .)";cd "$MARK";MARK="$FLICK"'
alias flickto='MARK="$(realpath .)";cd'

# Bash aliases
alias l='ls --color'
# OSX uses CLICOLOR to show color instead of --color
l &> /dev/null
if [ "$?" == "1" ]; then
  alias l='ls'
  export CLICOLOR=1
fi
alias ll='l -lah'
alias ll-sort-size='ll -S'
alias w='cd /var/www/html'
alias wr='cd ~/Work/realtalk'
function f {
  grep "$1" -R .
}

alias vsci='sudo vim /splice/software/javaOutgoing/SplashCall.ini'

alias cda='cd /etc/asterisk'
alias cdh='cd /etc/httpd'
alias cdhc='cd /etc/httpd/conf'
alias cdhcd='cd /etc/httpd/conf.d'
alias cdid='cd /etc/init.d'
alias cdj='cd /splice/software/javaOutgoing'
alias cdt='cd /splice/software/testcalls'
alias cdr='cd /splice/local/lib/realtalk360'

alias cdla='cd /var/log/asterisk'
alias cdlh='cd /var/log/httpd'

function md { mkdir $1; cd $1; }
alias ..='cd ..'
alias cd..='cd ..'
function susu { sudo su "${@}"; if [ $? == 1 ]; then exit 1; fi; }
alias die='exit 1'

# Log aliases
alias tail-httpd="tail -n20 /var/log/httpd/error_log"

# MySQL aliases
alias mq="mysql -uroot -p'$RDSPASS'"
alias mqd="mysqldump -uroot -p'$RDSPASS'"
alias mq-rds="mysql -uroot -p'$RDSPASS' -h'$RDSHOST'"
alias mqd-rds="mysqldump -uroot -p'$RDSPASS' -h'$RDSHOST'"

# Django aliases
function dm-path {
cwd="$(pwd)"
while [ ! -f manage.py ]; do
if [ "$(pwd)" == "/" ]; then
echo Hit the root.
break;
fi
cd ..
done
if [ -f manage.py ]; then
echo $(pwd)/manage.py
else
cd "$cwd"
fi
}
alias dm='python $(dm-path)'
alias dm-runserver='dm runserver 0.0.0.0:80'
alias dm-startapp='dm startapp'
alias dm-migrate='dm migrate'
alias dm-mig='dm makemigrations; dm migrate'


# Git aliases
alias gits='git status'
alias gita='git add -A'
alias gitan='git add -An'
alias gitc='git commit -m'
alias gitch='git checkout'
alias gitchb='git checkout -b'
alias gitpush='git push origin HEAD'
alias gitpull='git pull origin HEAD'
alias gitgraph='git log --graph --oneline --decorate --date=relative --all --color'
function gitacp { git add -A; git commit -m "$1"; git push origin HEAD; }
function gitcp { git commit -m "$1" ; git push origin HEAD; }
function bashrc-update { cd $BASHRC_DIR; gitpull; . main; }

# Mercurial aliases
function hg-clone { hg clone ssh://hg@spliceserver2:/$1; }
alias hgs='hg st | grep -vE "^\?"'
alias hga='hg add'
alias hgan='hg add -n'
alias hgar='hg addremove'
alias hgc='hg commit -m'
alias hgch='hg update -c'
alias hgchb='hg branch'
alias hgpush='hg push'
alias hgpull='hg pull -u'
alias hgb='hg branch'
alias hgheads='hg heads .'
HGTEMPLATE="{rev}{ifeq(branch,'default','',' {branch}')}{if(bookmarks,' {bookmarks}')}{if(tags,' {tags}')} - {desc|firstline}"
alias hggraph='hg log -l 30 --graph --template "$HGTEMPLATE"'
function hgpbn {
    if [ "$#" == "1" ]; then
        hg push --branch "SPLICE-$1" --new-branch
    else
        hg push -r . --new-branch
    fi
}
function hgpb {
    if [ "$#" == "1" ]; then
        hg push --branch "SPLICE-$1"
    else
        hg push -r .
    fi
}
function hgub {
    if [ "$#" == "1" ]; then
        hg update -r "SPLICE-$1"
    fi
}
function hgcpb {
    hgc "$1"
    hgpb
}



# Package Manager aliases
alias ag='sudo apt-get -y install'
alias ags='sudo apt-get -s install'
alias agu='sudo apt-get upgrade'
alias agli='apt --installed list'
alias aglg='apt list | grep'
alias yumi='sudo yum -y install'
alias yumlg='yum list | grep'
alias yumli='yum list installed | grep'
alias yumu='sudo yum -y update'
alias pipi='pip install'
alias pipu='pip install --upgrade'
alias piplg='pip search'

# Service aliases
function sr { service "$1" restart; }
function srv { service "$2" "$1"; }
alias srh='sr httpd'
alias sra='sr asterisk'
alias srm='sr mysqld'
alias srn='sr neo4j-service'
alias srs='sr smb'
alias sall='service --status-all'

alias sc='systemctl'
function scr { systemctl restart $1; }
alias scrh='scr httpd'
alias scra='scr apache2'
alias scrm='scr mysqld'
alias scrn='scr neo4j-service'
alias scrs='scr smb'

function scs { systemctl status $1; }
alias scsh='scs httpd'
alias scsa='scs apache2'
alias scsm='scs mysqld'
alias scsn='scs neo4j-service'
alias scss='scs smb'
alias scall='systemctl'

# Ansible aliases
alias play='ansible-playbook'

# Work directory
alias work='cd $WORK_HOME'

# Common functions 
alias rsync-sudo='rsync -e "ssh" --progress --rsync-path="sudo rsync"'
alias rsync-limited='rsync --progress --bwlimit=1000'
alias rsync-sudo-limited='rsync-sudo --bwlimit=1000'
function rsync-ext {                           rsync -amv --progress --include="$1" --include='*/' --exclude='*' $2 $3; }
function rsync-sudo-ext {                 rsync-sudo -amv --progress --include="$1" --include='*/' --exclude='*' $2 $3; }
function limited-rsync-ext {           rsync-limited -amv --progress --include="$1" --include='*/' --exclude='*' $2 $3; }
function limited-rsync-sudo-ext { rsync-sudo-limited -amv --progress --include="$1" --include='*/' --exclude='*' $2 $3; }

function clean-comments { cat "$1" | grep -Ev "^\s*;"; }
alias sync-time='ntpdate pool.ntp.org'
function fix-time { ntpdate time.nist.gov; chkconfig ntpd on; service ntpd start; }
function mst-time { if [ -f "/usr/share/zoneinfo/America/Edmonton" ]; then rm -f /etc/localtime; ln -fs /usr/share/zoneinfo/America/Edmonton /etc/localtime; fi; }
alias encrypt-file='gpg --cipher-algo AES256 --symmetric $1'
alias decrypt-file='gpg'
alias regex='$BASHRC_DIR/regex.py'
function regex-lineswap { sed -i '/'"$1"'/c\'"$2" "$3"; }
function allow-ssh-root-login { regex-lineswap '^PermitRootLogin' 'PermitRootLogin without-password' /etc/ssh/sshd_config; service sshd restart; }
alias edit-bashrc='cd $BASHRC_DIR; vim'

#Warning: resets permissions
function prepend { 
if [ -f "$2" ]; then
echo "$1" | cat - "$2" > /tmp/prepend && mv /tmp/prepend "$2"; 
else
echo "$1" > "$2"
fi
}

function setup-ssh-login { 
	if [ ! -d ~/.ssh ]; then 
		mkdir ~/.ssh; 
	fi
	chmod 700 ~/.ssh
	cd ~/.ssh
	if [ ! -f ~/.ssh/mlkey.pub ]; then
		cp $BASHRC_DIR/ssh/mlkey.pub ./
	fi
	cat mlkey.pub >> authorized_keys
	chmod 600 *
	cd ~
	if [ -f /usr/sbin/restorecon ]; then 
		restorecon -FRvv ~/.ssh
	fi
}
function setup-ssh-creds {
	if [ ! -d ~/.ssh ]; then
		setup-ssh-login
	fi
	cd ~/.ssh
	cp $BASHRC_DIR/ssh/mlkey.pem.gpg ./
	decrypt-file mlkey.pem.gpg
	ask-yes "Set mlkey as id_rsa?"
	if [ "$ASK" != "n" ]; then
		cp mlkey.pem id_rsa
	fi
	ask-yes "Set gmail as github key?"
	if [ "$ASK" != "n" ]; then
		cp $BASHRC_DIR/ssh/gmail.pem.gpg ./
		decrypt-file gmail.pem.gpg
		if grep -L "github.com" config > /dev/null; then
			echo "config already contains github entry, skipping"
		else
			cat $BASHRC_DIR/ssh/config-git >> ~/.ssh/config
		fi
		cd $BASHRC_DIR
		git remote set-url origin git@github.com:maludwig/bashrc.git
		git config --global user.name "Mitchell Ludwig"
		git config --global user.email mitchell.ludwig@gmail.com
		cd ~/.ssh
	fi
	rm *.gpg
	chmod 700 .
	chmod 600 *
}

SSH_ENV="$HOME/.ssh/environment"

function start_agent {
    echo "Initialising new SSH agent..."
    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
    echo succeeded
    chmod 600 "${SSH_ENV}"
    . "${SSH_ENV}" > /dev/null
    /usr/bin/ssh-add;
}
function ensure_running_agent {
	# Source SSH settings, if applicable

	if [ -f "${SSH_ENV}" ]; then
		. "${SSH_ENV}" > /dev/null
		#ps ${SSH_AGENT_PID} doesn't work under cywgin
		ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
			start_agent;
		}
	else
		start_agent;
	fi
}
function prepend-ssh-agent-forwarding { prepend "ForwardAgent yes" ~/.ssh/config; }


function generate-ssh-key {
	cd ~/.ssh
	ask-default 'What username will this key be for?' "$USER"
	FILENAME="$ASK-$(date +%F)";
	ssh-keygen -t rsa -b 4096 -C "$ASK - $(date +%F)" -f "$FILENAME";
	msg-info "Your public key is below, you can share this with anyone, but keep your private key safe";
	cat "$FILENAME.pub";
	ask-yes "Shall I add this new key ($FILENAME) to ~/.ssh/config for you?";
	if [ "$ASK" != "n" ]; then
		prepend "IdentityFile ~/.ssh/$FILENAME" ~/.ssh/config;
		msg-success "Added identity to config"
	fi
	grep -q "ensure_running_agent" ~/.bashrc
	if [ $? != 0 ]; then
		ask-yes "It looks like you are not running the ssh-agent. Shall I add it to your bashrc?"
		if [ "$ASK" != "n" ]; then
			echo "ensure_running_agent" >> ~/.bashrc;
			msg-success "Added agent to bashrc"
		fi
	fi
	ask-yes "Shall I add this new key ($FILENAME) to ~/.bashrc for you?";
	if [ "$ASK" != "n" ]; then
		echo "ssh-add ~/.ssh/$FILENAME" >> ~/.bashrc;
		msg-success "Added key to agent"
	fi
}

function set-host-alias { ask-default "Enter a host alias for this machine" "$HOST_ALIAS"; echo 'export HOST_ALIAS="'${ASK}'"' > $BASHRC_DIR/hostvars; . $BASHRC_DIR/hostvars; }

# Login aliases
alias suw='sudo su apache'


RDS_HOST='psql02az.splicesoftware.com'
RDS_USER='splice'
RDS_PASS='425-78-Ave-SW'

function timed_query {
  WHOLE_QUERY=`cat`
  log-8601 "--- Running query ---"
  log-8601 "$WHOLE_QUERY"
  START_TIME=`date +%s`
  echo "$WHOLE_QUERY" | mysql -h${RDS_HOST} -u${RDS_USER} -p${RDS_PASS}
  # sleep 64
  END_TIME=`date +%s`
  ELAPSED=$[END_TIME-START_TIME]
  MINS=$[ELAPSED/60]
  SECS=$[ELAPSED-$[MINS*60]]
  if [ "$ELAPSED" == 0 ]; then
    msg-error "Query ran suspiciously quickly."
  fi
  log-8601 "--- Done, ran for ${MINS}m${SECS}s ---"
}

function get-user-home-dir {
  THEUSER="$1"
  getent passwd "$THEUSER" | cut -d: -f6
}

function allow-bash-login {
  ask-default "Which user should I allow bash access for?" "$1"
  THEUSER="$ASK"
  echo usermod -s /bin/bash "$THEUSER"
  THEHOMEDIR=`get-user-home-dir`
  ask-yes "Recursively change permissions for $THEUSER home directory, $THEHOMEDIR ?"
}

function query_count {
  DB_AND_TABLE="$1"
  mysql -h${RDS_HOST} -u${RDS_USER} -p${RDS_PASS} -N -B -e "SELECT COUNT(*) FROM ${DB_AND_TABLE};"
}

function time_each_query_in_file {
  FILEPATH="$1"
  ORIGINAL_IFS="$IFS"
  IFS=';'
  for QUERY in `cat "$FILEPATH"`; do
    echo "$QUERY;" | timed_query
  done
  IFS="$ORIGINAL_IFS"
}

function setup-sync {
  if [ -f ~/.sync_options ]; then
    source ~/.sync_options
  else
    SYNCSVR='localhost'
    SYNCLOCALPARENT=`realpath .`
    SYNCREMOTEPARENT=`realpath .`
    SYNCSWITCHES="-iav --exclude '*.pyc' --checksum --ignore-times --no-times --no-owner --no-group --no-perms"
  fi
  ask-default "Which remote host do you want to sync to?" "$SYNCSVR"
  export SYNCSVR="$ASK"
  ask-default "What is the parent directory on your local?" "$SYNCLOCALPARENT"
  export SYNCLOCALPARENT="$ASK"
  ask-default "What is the parent directory on the remote server?" "$SYNCREMOTEPARENT"
  export SYNCREMOTEPARENT="$ASK"
  ask-default "What switches should I use?" "$SYNCSWITCHES"
  export SYNCSWITCHES="$ASK"
  echo "
  export SYNCSVR='$SYNCSVR'
  export SYNCLOCALPARENT='$SYNCLOCALPARENT'
  export SYNCREMOTEPARENT='$SYNCREMOTEPARENT'
  export SYNCSWITCHES='$SYNCSWITCHES'
  " > ~/.sync_options
}

function syncup {
  DIRNAME="$1"
  echo "Syncing:"
  echo " Remote: $SYNCREMOTEPARENT/$DIRNAME/"
  echo " Local:  $SYNCLOCALPARENT/$DIRNAME/"
  rsync-sudo $SYNCSWITCHES "$SYNCLOCALPARENT/$DIRNAME/" "$SYNCSVR:$SYNCREMOTEPARENT/$DIRNAME/"
}

#function syncup {
#  DIRNAME="$1"
#  echo "Syncing $DIRNAME to $SYNCSVR"
#  echo rsync-sudo -iav --exclude '*.pyc' --checksum --ignore-times --no-times --no-owner --no-group --no-perms "/home/mitchell/Work/realtalk/realtalk360/$DIRNAME/" "$SYNCSVR:/splice/local/lib/realtalk360/$DIRNAME/"
#}


function leeroy {
  echo -ne "$CCYAN"
  echo -ne "LE"
  sleep 0.1
  echo -ne "E"
  sleep 0.1
  echo -ne "E"
  sleep 0.1
  echo -ne "E"
  sleep 0.1
  echo -ne "$CGREEN"
  echo -ne "E"
  sleep 0.1
  echo -ne "E"
  sleep 0.1
  echo -ne "E"
  sleep 0.1
  echo -ne "$CYELLOW"
  echo -ne "E"
  sleep 0.1
  echo -ne "E"
  sleep 0.1
  echo -ne "E"
  sleep 0.1
  echo -ne "$CRED"
  echo -ne "E"
  sleep 0.1
  echo -ne "E"
  sleep 0.1
  echo -ne "E"
  sleep 0.1
  echo -ne "R"
  sleep 0.1
  echo -ne "O"
  sleep 0.1
  echo -ne 'Y!'
  sleep 1

  echo -ne "$CPINK"
  sleep 0.1
  echo -ne ' JE'
  sleep 0.1
  echo -ne 'E'
  sleep 0.1
  echo -ne 'E'
  sleep 0.1
  echo -ne 'NK'
  sleep 0.1
  echo -ne 'I'
  sleep 0.5
  echo -ne 'N'
  sleep 0.2
  echo -ne 'S!!!'
}

