#!/bin/bash

if [[ "$BASHRC_LOADED" != "yes" ]]; then

  if command -v gdate &> /dev/null; then
    function unix_nanos {
      gdate +%s.%N
    }
  else 
    function unix_nanos {
      date +%s.%N
    }
  fi

  # Record this directory for later reference
  if [ -n "$BASH_VERSION" ]; then
    export BASHRC_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
  elif [ -n "$ZSH_VERSION" ]; then
    export BASHRC_DIR="$( cd "$( dirname "$0" )" && pwd )"
    setopt SH_WORD_SPLIT
  fi

  load_all_scripts_in_dir () {
    local SCRIPT_D_DIR
    local SCRIPT_D_SCRIPT
    local SCRIPT_BASE_SORT=""
    TOTAL_SOURCE_START=`unix_nanos`
    for SCRIPT_D_DIR in "$@"; do
      if [[ -d "$SCRIPT_D_DIR" ]]; then
        # Apply additional profile scripts if they exist
        for SCRIPT_D_SCRIPT in "$SCRIPT_D_DIR"/*.sh; do
          # If the file is readable
          if [ -r "$SCRIPT_D_SCRIPT" ]; then
            SCRIPT_BASE_SORT="$SCRIPT_BASE_SORT"$'\n'"$(basename $SCRIPT_D_SCRIPT):$SCRIPT_D_SCRIPT"
          fi
        done
      fi
    done
    SCRIPT_BASE_SORT="$(echo "$SCRIPT_BASE_SORT" | LC_COLLATE=C sort)"
    # echo "Sorted scripts:"
    # echo "$SCRIPT_BASE_SORT"
    for SCRIPT_D_SCRIPT in `echo "$SCRIPT_BASE_SORT" | cut -d: -f2`; do
      if [[ "$MEASURE_SCRIPT_LOAD_TIME" == "yes" ]]; then
        UNIX_START_TIME=`unix_nanos`
        echo "Sourcing: $SCRIPT_D_SCRIPT"
      fi
      source "$SCRIPT_D_SCRIPT"
      if [[ "$MEASURE_SCRIPT_LOAD_TIME" == "yes" ]]; then
        echo "Done: $SCRIPT_D_SCRIPT"
        UNIX_END_TIME=`unix_nanos`
        SLOW_TO_SOURCE=`echo $UNIX_END_TIME $UNIX_START_TIME | awk '{print ((($1-$2)) > 0.2)}'`
        TOTAL_TIME_IN_MS=`echo $UNIX_END_TIME $UNIX_START_TIME | awk '{ printf("%0.2f",$1-$2) }'`
        if [ -z "$SUPPRESS_SLOW_SOURCE_WARNING" ]; then
          if [[ "$SLOW_TO_SOURCE" == "1" ]]; then
            msg-error "It took ${TOTAL_TIME_IN_MS}s to load $SCRIPT_D_SCRIPT"
          else
            msg-info "It took ${TOTAL_TIME_IN_MS}s to load $SCRIPT_D_SCRIPT"
          fi
        fi
      fi
    done
    TOTAL_SOURCE_END=`unix_nanos`
    SLOW_TO_SOURCE=`echo $TOTAL_SOURCE_END $TOTAL_SOURCE_START | awk '{print ((($1-$2)) > 2)}'`
    TOTAL_TIME_IN_MS=`echo $TOTAL_SOURCE_END $TOTAL_SOURCE_START | awk '{ printf("%0.2f",$1-$2) }'`
    if [ -z "$SUPPRESS_SLOW_SOURCE_WARNING" ]; then
      if [[ "$SLOW_TO_SOURCE" == "1" ]]; then
        msg-error "
          It took ${TOTAL_TIME_IN_MS}s to load all scripts in these directories: $@
          If you want to find the scripts that are slow, add the following to the top of your ~/.bashrc or ~/.zshrc or ~/.bash_profile file:
            MEASURE_SCRIPT_LOAD_TIME=yes
          To suppress this message, add this line instead:
            SUPPRESS_SLOW_SOURCE_WARNING=yes
        "
      fi
    fi
  }
  load_all_scripts_in_dir "$BASHRC_DIR/scripts/src"
  # Bash aliases
  if [ -f $BASHRC_DIR/aliases ]; then
    . $BASHRC_DIR/aliases
  fi
  # Default variables
  
  if [ -n "$BASH_VERSION" ]; then
    HOST_ALIAS='\H'
  elif [ -n "$ZSH_VERSION" ]; then
    HOST_ALIAS="%m"
  fi
  if [[ "$USER" == "" ]]; then
    USER="${USERNAME}"
  fi

  function assert-path {
    if [ -d "$1" ]; then
      if ! echo ":${PATH}:" | grep -q ":${1}:"; then PATH="$PATH:$1" ; fi
    fi
    export PATH
  }
  

  assert-path "${HOME}/bin"
  assert-path "/bin"
  assert-path "/usr/bin"
  assert-path "/usr/local/bin"

  assert-path "/sbin"
  assert-path "/usr/sbin"
  assert-path "/usr/local/sbin"
  assert-path "/opt/python2.7/bin"

  assert-path "$BASHRC_DIR/bin"

  # EC2 Environment
  una=`uname -a`
  if echo "$una" | grep "amzn" > /dev/null; then
    if [ -f $BASHRC_DIR/amzn ]; then
      . $BASHRC_DIR/amzn
    fi
  fi

  # Host specific variables
  if [ -f $BASHRC_DIR/hostvars ]; then
    . $BASHRC_DIR/hostvars
  fi

  if [ -n "$BASH_VERSION" ]; then
    PS1="\[${CUSER}\]\u@\[${CYELLOW}\]${HOST_ALIAS}:\[${CGREEN}\]\w\[${CDEFAULT}\] \n\$ "
  elif [ -n "$ZSH_VERSION" ]; then
    precmd() { eval "$PROMPT_COMMAND"; }
    PS1="${CUSER}%n@${CYELLOW}${HOST_ALIAS}:${CGREEN}%~${CDEFAULT}"$'\n$ '
    # PS1="%{$fg[red]%}%n%{$reset_color%}@%{$fg[blue]%}%m %{$fg[yellow]%}%~ %{$reset_color%}%% "
  fi
  assert_in_prompt_command 'add_to_backlist'

  # Bash history improvements
  if [ -f $BASHRC_DIR/history ]; then
    . $BASHRC_DIR/history
  fi
  # set PATH so it includes user's private bin if it exists
  if [ -d "$HOME/bin" ] ; then
    PATH="$HOME/bin:$PATH"
  fi

  . $BASHRC_DIR/secrecy.sh

  # You can extend your bashrc with an entry in your local ~/profile.d
  load_all_scripts_in_dir "$HOME/profile.d"
  BASHRC_LOADED="yes"
fi
